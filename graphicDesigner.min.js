/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	// setImmediate polyfill (promisous dependency)
	if (!window.setImmediate) window.setImmediate = window.setTimeout;
	
	
	var graphicDesigner = __webpack_require__(/*! ./core */ 1);
	
	graphicDesigner.plugins.imageUpload           = __webpack_require__(/*! ./plugins/imageUpload */ 2);
	graphicDesigner.plugins.textInput             = __webpack_require__(/*! ./plugins/textInput */ 3);
	graphicDesigner.plugins.cache                 = __webpack_require__(/*! ./plugins/cache */ 4);
	graphicDesigner.plugins.deleteButton          = __webpack_require__(/*! ./plugins/deleteButton */ 5);
	graphicDesigner.plugins.zIndexUpdate          = __webpack_require__(/*! ./plugins/zIndexUpdate */ 6);
	graphicDesigner.plugins.backgroundColorPicker = __webpack_require__(/*! ./plugins/backgroundColorPicker */ 7);
	graphicDesigner.plugins.sizeSelect            = __webpack_require__(/*! ./plugins/sizeSelect */ 8);
	graphicDesigner.plugins.scaling               = __webpack_require__(/*! ./plugins/scaling */ 9);
	graphicDesigner.plugins.rotating              = __webpack_require__(/*! ./plugins/rotating */ 10);
	graphicDesigner.plugins.preview               = __webpack_require__(/*! ./plugins/preview */ 22);
	
	
	window.graphicDesigner = graphicDesigner;


/***/ },
/* 1 */
/*!***********************!*\
  !*** ./core/index.js ***!
  \***********************/
/***/ function(module, exports, __webpack_require__) {

	var eventEmitter = __webpack_require__(/*! ./eventEmitter */ 11);
	var svgElement = __webpack_require__(/*! ./svgElement */ 12);
	var select = __webpack_require__(/*! ./select */ 13);
	var move = __webpack_require__(/*! ./move */ 14);
	var utils = __webpack_require__(/*! ./utils */ 15);
	var uriToPng = __webpack_require__(/*! ./uriToPng */ 21);
	var uriToBlob = __webpack_require__(/*! ./uriToBlob */ 24);
	
	
	var defaults = {
	    width: 500,
	    height: 500,
	    scaleFactor: 1,
	    unit: 'pixel',
	    dpi: 300,
	    selectBodyClass: 'item-selected',
	    itemClass: 'item',
	    itemSelectClass: 'selected',
	    itemDragClass: 'dragging'
	};
	
	
	var graphicDesigner = function(options) {
	
	    var app = {};
	
	    app.utils = utils;
	
	    app.config = utils.defaults(options, defaults);
	
	    app.container = document.querySelector(app.config.element);
	
	    app.ready = function() {
	        app.emit('ready');
	        return app;
	    };
	
	
	    app.setSize = function(width, height) {
	        if (app.config.unit === 'mm') {
	            width = mmToInch(width);
	            height = mmToInch(height);
	        }
	        if (app.config.unit !== 'pixel') {
	            width = width * app.config.dpi;
	            height = height * app.config.dpi;
	        }
	        app.svg.setAttribute('width', Math.round(width * app.config.scaleFactor));
	        app.svg.setAttribute('height', Math.round(height * app.config.scaleFactor));
	
	        app.emit('svg:resize');
	
	        return app;
	    };
	
	
	    app.createPng = function() {
	            app.emit('render');
	
	            var node = app.svg;
	
	            // use original DPI
	            var w = parseInt(node.getAttribute('width'), 10);
	            var h = parseInt(node.getAttribute('height'), 10);
	            node.setAttribute('width' , w / app.config.scaleFactor);
	            node.setAttribute('height', h / app.config.scaleFactor);
	            node.setAttribute('viewBox', '0 0 '+w+' '+h);
	
	            // http://www.timvasil.com/blog14/post/2014/02/06/How-to-convert-an-SVG-image-into-a-static-image-with-only-JavaScript.aspx
	            var svgData = new XMLSerializer().serializeToString(node);
	            var blob = new Blob([svgData], { type: 'image/svg+xml' });
	            var url = (window.URL || window.webkitURL || window).createObjectURL(blob);
	
	            // reset to work size
	            node.setAttribute('width' , w);
	            node.setAttribute('height', h);
	            node.removeAttribute('viewBox');
	
	            return uriToPng(url);
	    };
	
	
	    app.createBlob = function() {
	        return app.createPng().then(function(png) {
	            return uriToBlob(png.url);
	        });
	    };
	
	
	    // plugin activation shortcuts
	    Object.keys(graphicDesigner.plugins).forEach(function(key) {
	        app[key] = function(options) {
	            var plugin = graphicDesigner.plugins[key];
	            plugin(app, utils.defaults(options, plugin.defaults));
	            return app;
	        };
	    });
	
	
	    eventEmitter(app);
	    svgElement(app);
	    select(app);
	    move(app);
	
	
	    return app;
	};
	
	
	graphicDesigner.plugins = {};
	
	
	var mmToInch = function(mm) {
	    return Math.round(mm * 3.937) / 100;
	};
	
	
	module.exports = graphicDesigner;


/***/ },
/* 2 */
/*!********************************!*\
  !*** ./plugins/imageUpload.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var Promise = __webpack_require__(/*! promiscuous */ 18);
	var readImage = __webpack_require__(/*! ./utils/readImage */ 16);
	
	
	var imageUpload = function(app, options) {
	
	    var button = document.querySelector(options.element);
	
	    var input = document.createElement('input');
	    input.type = 'file';
	    input.accept = 'image/*';
	
	
	    var uploadFromInput = function() {
	        singleFile(input.files)
	            .then(readImage)
	            .then(scale)
	            .then(center)
	            .then(create);
	    };
	
	
	    var triggerFileInput = function() {
	        var event = document.createEvent('HTMLEvents');
	        event.initEvent('click', true, false);
	        input.dispatchEvent(event);
	    };
	
	
	    var uploadFromDrop = function(e) {
	        e.preventDefault();
	        dropClass(false);
	        // TODO: warn on big image size
	        singleFile(e.dataTransfer.files)
	            .then(readImage)
	            .then(scale)
	            .then(placeAt(e))
	            .then(create);
	    };
	
	
	    var enableDropClass = function(e) {
	        e.preventDefault();
	        dropClass(true);
	    };
	
	
	    var disableDropClass = function() {
	        dropClass(false);
	    };
	
	
	    var debounce = function(func, wait) {
	        var timeout, args, next;
	
	        return function debounced() {
	            args = arguments;
	            if (timeout) {
	                next = true;
	                return;
	            }
	
	            func.apply(null, args);
	
	            timeout = setTimeout(function() {
	                clearTimeout(timeout);
	                timeout = undefined;
	                if (next) {
	                    next = false;
	                    debounced.apply(null, args);
	                }
	            }, wait);
	        };
	    };
	
	
	    // need to debounce becuase chrome behaves weird
	    // and fires drag enter/leave events randomly
	    var dropClass = debounce(function(active) {
	        if (options.dropBodyClass) {
	            document.body.classList[active ? 'add' : 'remove'](options.dropBodyClass);
	        }
	    }, 300);
	
	
	    var singleFile = function(files) {
	        return files.length === 1 ? Promise.resolve(files[0]) : Promise.reject();
	    };
	
	
	    // scale to fit in screen
	    var scale = function(image) {
	        // NOTE: maybe there is a smarter way for this calcualtion ..
	        var rect = app.svg.getBoundingClientRect();
	        var factor = Math.min(rect.width / image.width, rect.height / image.height, 1);
	
	        image.width = Math.round(factor * image.width);
	        image.height = Math.round(factor * image.height);
	        return image;
	    };
	
	
	    var center = function(image) {
	        var rect = app.svg.getBoundingClientRect();
	        image.x = Math.round(0.5 * (rect.width - image.width));
	        image.y = Math.round(0.5 * (rect.height - image.height));
	        return image;
	    };
	
	
	    var create = function(image) {
	        var el = app.utils.svgCreate('image');
	
	        el.setAttribute('height', image.height);
	        el.setAttribute('width', image.width);
	        el.setAttribute('class', app.config.itemClass);
	        el.setAttributeNS('http://www.w3.org/1999/xlink', 'href', image.url);
	
	        app.utils.svgTranslate(el, image.x, image.y);
	
	        app.svg.appendChild(el);
	        app.emit('element:create', el);
	    };
	
	
	    var placeAt = function(event) {
	        if (event.target !== app.svg) {
	            return center;
	        }
	
	        return function(image) {
	            var rect = app.svg.getBoundingClientRect();
	            var top = rect.top + document.body.scrollTop;
	            var left = rect.left + document.body.scrollLeft;
	
	            image.x = Math.round(event.pageX - left - 0.5 * image.width);
	            image.y = Math.round(event.pageY - top - 0.5 * image.height);
	
	            return image;
	        };
	    };
	
	
	    document.addEventListener('dragenter', enableDropClass);
	    document.addEventListener('dragover', enableDropClass);
	    document.addEventListener('dragleave', disableDropClass);
	    document.addEventListener('drop', uploadFromDrop);
	    input.addEventListener('change', uploadFromInput);
	    if (button) button.addEventListener('click', triggerFileInput);
	
	};
	
	
	module.exports = imageUpload;


/***/ },
/* 3 */
/*!******************************!*\
  !*** ./plugins/textInput.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	var colorPicker = __webpack_require__(/*! ./utils/colorPicker */ 17);
	__webpack_require__(/*! ./utils/matchesSelector.poly */ 20);
	
	
	var defaults = {
	    selectBodyClass: 'text-selected',
	    fontSelector: '.text-font',
	    fontAttribute: 'data-font',
	    color: '#ffffff',
	    textWidth: 100,
	    textHeight: 30,
	    placeholder: 'Insert Text …',
	    scaleFactor: 1,
	    scaleOffset: 5
	};
	
	
	
	var textInput = function(app, options) {
	
	    var el;
	
	
	    var inputField = document.querySelector(options.input);
	    inputField.setAttribute('placeholder', options.placeholder);
	
	
	    var addBodyClass = function() {
	        document.body.classList.add(options.selectBodyClass);
	    };
	
	    var removeBodyClass = function() {
	        document.body.classList.remove(options.selectBodyClass);
	    };
	
	
	    var updateInputs = function(item) {
	        if (item.tagName !== 'text') return;
	
	        el = item;
	
	        inputField.value = el.innerHTML !== options.placeholder ? el.innerHTML : '';
	
	        addBodyClass();
	    };
	
	
	    var createText = function() {
	        var el = app.utils.svgCreate('text');
	
	        var rect = app.svg.getBoundingClientRect();
	
	        el.setAttribute('class', app.config.itemClass);
	        el.innerHTML = options.placeholder;
	
	        app.utils.svgTranslate(el, rect.width / 2, rect.height / 2);
	
	        app.svg.appendChild(el);
	        app.emit('element:create', el);
	
	        inputField.focus();
	    };
	
	
	    var updateText = function() {
	        el.innerHTML = inputField.value || options.placeholder;
	        app.emit('element:change:text', el);
	        app.emit('resize');
	    };
	
	
	    var resize = function(h) {
	        var size = h * options.scaleFactor + options.scaleOffset;
	        if (size < options.scaleOffset) return;
	        el.style.fontSize = size;
	        app.emit('resize');
	        app.emit('element:font:resize');
	    };
	
	
	    var updateFont = function(e) {
	        if (! e.target.matchesSelector(options.fontSelector) ) return;
	
	        el.style.fontFamily = e.target.getAttribute(options.fontAttribute);
	        app.emit('element:change:font', el);
	    };
	
	
	    var updateColor = function(color) {
	        el.style.fill = color;
	    };
	
	
	    var colorChange = function() {
	        app.emit('element:change:color', el.style.fill);
	    };
	
	
	    colorPicker(app, {
	        element: options.colorPicker,
	        image: options.colorImage
	    }, updateColor, colorChange);
	
	
	    document.addEventListener('click', updateFont);
	
	    inputField.addEventListener('change', updateText);
	    inputField.addEventListener('keyup', updateText);
	
	    document.querySelector(options.createButton)
	        .addEventListener('click', createText);
	
	    app.on('element:select', updateInputs);
	    app.on('element:unselect', removeBodyClass);
	    app.on('text:scale', resize);
	
	};
	
	textInput.defaults = defaults;
	
	
	module.exports = textInput;


/***/ },
/* 4 */
/*!**************************!*\
  !*** ./plugins/cache.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var defaults = {
	    storageKey: 'graphicDesignerGraphic'
	};
	
	
	var cache = function(app, options) {
	
	    var loadFromCache = function() {
	        var backup = localStorage.getItem(options.storageKey);
	        if (!backup) return;
	
	        app.container.innerHTML = backup;
	        app.svg = app.container.querySelector('svg');
	        app.emit('svg:load');
	    };
	
	
	    var updateCache = function() {
	        localStorage.setItem(options.storageKey, app.container.innerHTML);
	        app.emit('cache:change');
	    };
	
	
	    app
	        .on('ready', loadFromCache)
	        .on('element', updateCache)
	        .on('svg:resize', updateCache)
	        .on('background', updateCache);
	
	};
	
	
	cache.defaults = defaults;
	
	module.exports = cache;


/***/ },
/* 5 */
/*!*********************************!*\
  !*** ./plugins/deleteButton.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var deleteButton = function(app, options) {
	
	    var button = document.querySelector(options.element);
	
	
	    var deleteElement = function() {
	        if (!app.selected) return;
	        if (!window.confirm('Soll das ausgewählte Element echt gelöscht werden?')) return;
	        app.selected.parentNode.removeChild(app.selected);
	        app.emit('element:delete');
	    };
	
	
	    button.addEventListener('click', deleteElement);
	
	};
	
	
	module.exports = deleteButton;


/***/ },
/* 6 */
/*!*********************************!*\
  !*** ./plugins/zIndexUpdate.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var zIndexUpdate = function(app, options) {
	
	    var prev, next;
	
	    var back = options.toBack && document.querySelector(options.toBack);
	    var front = options.toFront && document.querySelector(options.toFront);
	
	
	    var moveToBack = function() {
	        if (!app.selected) return;
	
	        app.svg.insertBefore(app.selected, prev);
	        updateSiblings();
	        app.emit('element:change:z-index', app.selected);
	    };
	
	
	    var moveToFront = function() {
	        if (!app.selected) return;
	
	        app.svg.insertBefore(app.selected, next.nextElementSibling);
	        updateSiblings();
	        app.emit('element:change:z-index', app.selected);
	    };
	
	
	    var updateSiblings = function() {
	        prev = app.selected && app.selected.previousElementSibling;
	        next = app.selected && app.selected.nextElementSibling;
	
	        if (back) check(back, prev);
	        if (front) check(front, next);
	    };
	
	
	    var check = function(button, neighbor) {
	        button.disabled = !neighbor || !neighbor.classList.contains(app.config.itemClass);
	    };
	
	
	    app.on('ready', updateSiblings);
	    app.on('element:select', updateSiblings);
	    app.on('element:unselect', updateSiblings);
	    if (back) back.addEventListener('click', moveToBack);
	    if (front) front.addEventListener('click', moveToFront);
	
	};
	
	
	module.exports = zIndexUpdate;


/***/ },
/* 7 */
/*!******************************************!*\
  !*** ./plugins/backgroundColorPicker.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	var colorPicker = __webpack_require__(/*! ./utils/colorPicker */ 17);
	
	
	var defaults = {
	    color: '#ffffff'
	};
	
	
	var backgroundColorPicker = function(app, options) {
	
	    var background;
	
	
	    var ensureBackground = function() {
	        background = app.svg.querySelector('.background') || createBackground();
	    };
	
	
	    var createBackground = function() {
	        var bg = app.utils.svgCreate('rect');
	
	        bg.setAttribute('fill', options.color);
	        bg.setAttribute('width', '100%');
	        bg.setAttribute('height', '100%');
	        bg.classList.add('background');
	
	        app.svg.insertBefore(bg, app.svg.firstChild);
	
	        return bg;
	    };
	
	
	    var update = function(color) {
	        background.setAttribute('fill', color);
	    };
	
	
	    var done = function() {
	        app.emit('background:change', background.getAttribute('fill'));
	    };
	
	
	
	    colorPicker(app, options, update, done);
	
	    app.on('ready', ensureBackground);
	
	};
	
	
	backgroundColorPicker.defaults = defaults;
	
	module.exports = backgroundColorPicker;


/***/ },
/* 8 */
/*!*******************************!*\
  !*** ./plugins/sizeSelect.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	var defaults = {
	    widthAttribute: 'data-width',
	    heightAttribute: 'data-height'
	};
	
	
	var sizeSelect = function(app, options) {
	
	    var selectBox = document.querySelector(options.element);
	
	
	    var updateSelection = function() {
	        var product = app.svg.getAttribute('data-product');
	        if (!product) return;
	        selectBox.value = product;
	    };
	
	
	    var updateSize = function() {
	        var selectedOption = selectBox.options[selectBox.selectedIndex];
	        var width = selectedOption.getAttribute(options.widthAttribute);
	        var height = selectedOption.getAttribute(options.heightAttribute);
	
	        app.svg.setAttribute('data-product', selectBox.value);
	        app.setSize(width, height);
	    };
	
	
	    app.on('ready', updateSelection);
	    selectBox.addEventListener('change', updateSize);
	
	};
	
	
	sizeSelect.defaults = defaults;
	
	
	module.exports = sizeSelect;


/***/ },
/* 9 */
/*!****************************!*\
  !*** ./plugins/scaling.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var defaults = {
	    iconWidth: 20,
	    iconHeight: 20
	};
	
	
	var scaling = function(app, options) {
	
	    var el;
	    var animate = app.utils.animation();
	
	    var scaler = app.utils.svgCreate('image');
	    scaler.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.image);
	    scaler.setAttribute('width', options.iconWidth);
	    scaler.setAttribute('height', options.iconHeight);
	
	
	    var updateScalerPos = function() {
	        scaler.setAttribute('x', el.getBBox().width);
	        scaler.setAttribute('y', el.getBBox().height);
	    };
	
	
	    app.on('element:select', function(item) {
	        el = item;
	        updateScalerPos();
	        app.selected.appendChild(scaler);
	    });
	
	    app.on('resize', updateScalerPos);
	
	
	    app.utils.dragDrop({
	
	        element: scaler,
	
	        start: function(e, data) {
	            e.stopPropagation();
	            e.preventDefault(); // Firefox thing
	
	            var posScaler = scaler.getBoundingClientRect();
	
	            data.offsetX = app.utils.pageX(e) - (posScaler.left + document.body.scrollLeft);
	            data.offsetY = app.utils.pageY(e) - (posScaler.top + document.body.scrollTop);
	
	            app.container.classList.add('resizing');
	        },
	
	        move: function(e, data) {
	            e.preventDefault(); // for touch events
	
	            var minSize = 50 * app.config.scaleFactor;
	
	            animate(function() {
	                var posEl = el.getBoundingClientRect();
	
	                var width = app.utils.pageX(e) - data.offsetX - posEl.left;
	                var height = app.utils.pageY(e) - data.offsetY - posEl.top;
	
	                if (el.tagName === 'text') {
	                    scaler.style.display = 'none';
	                    app.emit('text:scale', height);
	                    return;
	                }
	
	                // don't make element to small or negative size
	                if (width > minSize) {
	                    scaler.setAttribute('x', width);
	                    app.utils.svgWidth(el, width);
	                }
	                if (height > minSize) {
	                    scaler.setAttribute('y', height);
	                    app.utils.svgHeight(el, height);
	                }
	
	                app.emit('resize');
	            });
	        },
	
	        stop: function() {
	            if (el.tagName === 'text') scaler.style.display = 'initial';
	            app.container.classList.remove('resizing');
	            app.emit('element:resize', el);
	        }
	
	    });
	
	};
	
	scaling.defaults = defaults;
	
	
	module.exports = scaling;


/***/ },
/* 10 */
/*!*****************************!*\
  !*** ./plugins/rotating.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var defaults = {
	    iconWidth: 20,
	    iconHeight: 20
	};
	
	
	var RAD_TO_DEG = 180/Math.PI;
	
	var rotating = function(app, options) {
	
	    var el;
	    var animate = app.utils.animation();
	
	    var rotater = app.utils.svgCreate('image');
	    rotater.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.image);
	    rotater.setAttribute('width', options.iconWidth);
	    rotater.setAttribute('height', options.iconHeight);
	
	
	    var updateRotaterPos = function() {
	        rotater.setAttribute('x', el.getBBox().width);
	        rotater.setAttribute('y', -options.iconHeight + el.getBBox().y);
	    };
	
	    app.on('element:select', function(item) {
	        el = item;
	        updateRotaterPos();
	        app.selected.appendChild(rotater);
	    });
	
	    app.on('resize', updateRotaterPos);
	
	    app.utils.dragDrop({
	
	        element: rotater,
	
	        start: function(e, data) {
	            e.stopPropagation();
	            e.preventDefault(); // Firefox thing
	
	            var rect = app.svg.getBoundingClientRect();
	            data.pos = app.utils.svgTranslate(app.selected);
	            data.pos.x += rect.left + document.body.scrollLeft;
	            data.pos.y += rect.top + document.body.scrollTop;
	
	            app.container.classList.add('rotating');
	        },
	
	        move: function(e, data) {
	            e.preventDefault(); // for touch events
	
	            animate(function() {
	                var x = app.utils.pageX(e) - data.pos.x;
	                var y = data.pos.y - app.utils.pageY(e);
	                var alpha = -Math.atan2(y, x) * RAD_TO_DEG;
	
	                app.utils.svgRotate(app.selected, alpha);
	
	                app.emit('rotate', el);
	            });
	        },
	
	        stop: function() {
	            app.container.classList.remove('rotating');
	            app.emit('element:rotate', el);
	        }
	
	    });
	
	};
	
	rotating.defaults = defaults;
	
	
	module.exports = rotating;


/***/ },
/* 11 */
/*!******************************!*\
  !*** ./core/eventEmitter.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(obj) {
	
	    var events = {};
	    var slice = [].slice;
	
	
	    obj.on = function(event, handler) {
	        (events[event] = events[event] || []).push(handler);
	        return obj;
	    };
	
	
	    obj.emit = function(event) {
	        var i, handler;
	        var args = slice.call(arguments, 1);
	        var handlers = [];
	
	        // emit sub:events
	        var parts = event.split(':');
	        for (i = 1; i <= parts.length; i++) {
	            var subHandlers = events[parts.slice(0, i).join(':')];
	            if (subHandlers) handlers = handlers.concat(subHandlers);
	        }
	
	        for (i = 0, handler;
	            (handler = handlers[i]); ++i) {
	            handler.apply(null, args);
	        }
	
	        return obj;
	    };
	
	
	    // remove specific handler or remove all handlers
	    obj.off = function(event, handler) {
	        if (handler) {
	            var handlers = events[event];
	            var i = handlers.indexOf(handler);
	            if (i >= 0) handlers.splice(i, 1);
	        } else {
	            events[event] = [];
	        }
	
	        return obj;
	    };
	
	
	    return obj;
	};


/***/ },
/* 12 */
/*!****************************!*\
  !*** ./core/svgElement.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(app) {
	
	    var svg = app.utils.svgCreate('svg');
	
	    app.container.innerHTML = ''; // empty first
	    app.container.appendChild(svg);
	
	    app.svg = svg;
	
	    app.setSize(app.config.width, app.config.height);
	
	
	    app.emit('svg:load');
	
	};


/***/ },
/* 13 */
/*!************************!*\
  !*** ./core/select.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(app) {
	
	    var triggerSelect = function() {
	        var el = getSelected();
	        if (!el) return;
	        select(el);
	    };
	
	
	    var selectTarget = function(e) {
	        var notElement = !e.target.classList.contains(app.config.itemClass);
	        if (notElement) return clean();
	
	        e.stopPropagation();
	
	        var notSelected = !e.target.classList.contains(app.config.itemSelectClass);
	        if (notSelected) select(e.target);
	    };
	
	
	    var select = function(el) {
	        clean();
	        var group = app.utils.svgCreate('g');
	        el.classList.add(app.config.itemSelectClass);
	        group.setAttribute('transform', el.getAttribute('transform'));
	        el.setAttribute('transform', '');
	        var neighbor = el.nextSibling;
	        group.appendChild(el);
	        app.svg.insertBefore(group, neighbor);
	        bodyClass(true);
	        app.selected = group;
	        app.emit('element:select', el);
	    };
	
	
	    var clean = function(el) {
	        if (!el) el = getSelected();
	        bodyClass(false);
	        app.selected = undefined;
	        if (!el) return app.emit('element:unselect');
	        var group = el.parentNode;
	        var neighbor = group.nextSibling;
	        group.parentNode.removeChild(group);
	        el.classList.remove(app.config.itemSelectClass);
	        el.setAttribute('transform', group.getAttribute('transform'));
	        app.svg.insertBefore(el, neighbor);
	        app.emit('element:unselect', el);
	    };
	
	
	    var getSelected = function() {
	        return app.svg.querySelector('.' + app.config.itemClass + '.' + app.config.itemSelectClass);
	    };
	
	
	    var bodyClass = function(active) {
	        document.body.classList[active ? 'add' : 'remove'](app.config.selectBodyClass);
	    };
	
	
	    app
	        .on('element:create', select)
	        .on('element:delete', clean)
	        .on('render', clean)
	        .on('svg:load', triggerSelect)
	        .on('ready', triggerSelect)
	        .container.addEventListener(app.utils.onDown(), selectTarget);
	
	};


/***/ },
/* 14 */
/*!**********************!*\
  !*** ./core/move.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(app) {
	
	    var animate = app.utils.animation();
	
	
	    app.utils.dragDrop({
	
	        element: app.container,
	
	        start: function(e, data) {
	            var isElement = e.target.classList.contains(app.config.itemSelectClass);
	            if (!isElement) return false;
	
	            e.preventDefault(); // Firefox thing
	
	            data.cursorOffset = calcOffset(e, app.selected);
	            app.selected.classList.add(app.config.itemDragClass);
	        },
	
	        move: function(e, data) {
	            animate(function() {
	                app.utils.svgTranslate(app.selected, app.utils.pageX(e) - data.cursorOffset.x, app.utils.pageY(e) - data.cursorOffset.y);
	                app.emit('move', app.selected);
	            });
	        },
	
	        stop: function(e) {
	            e.preventDefault(); // FF thing
	
	            app.selected.classList.remove(app.config.itemDragClass);
	            app.emit('element:change:position', app.selected);
	        }
	
	    });
	
	
	    var calcOffset = function(e, el) {
	        var pos = app.utils.svgTranslate(el);
	
	        return {
	            x: app.utils.pageX(e) - pos.x,
	            y: app.utils.pageY(e) - pos.y
	        };
	    };
	
	};


/***/ },
/* 15 */
/*!***********************!*\
  !*** ./core/utils.js ***!
  \***********************/
/***/ function(module, exports, __webpack_require__) {

	var utils = {};
	
	
	utils.svgCreate = function(tag) {
	    return document.createElementNS('http://www.w3.org/2000/svg', tag);
	};
	
	
	utils.svgTranslate = function(el) {
	    var values = Array.prototype.slice.call(arguments, 1);
	    if (values.length) return setTransformProp(el, 'translate', values);
	
	    var prop = getTransformProp(el, 'translate');
	    if (!prop) return {
	        x: 0,
	        y: 0
	    };
	    return {
	        x: prop[0],
	        y: prop[prop.length - 1]
	    };
	};
	
	
	utils.svgRotate = function(el) {
	    var values = Array.prototype.slice.call(arguments, 1);
	    if (values.length) return setTransformProp(el, 'rotate', values);
	
	    var prop = getTransformProp(el, 'rotate');
	    return prop ? prop[0] : 0;
	};
	
	
	utils.svgWidth = function(el, val) {
	    if (val) return el.setAttribute('width', val);
	    return parseInt(el.getAttribute('width'), 10);
	};
	
	
	utils.svgHeight = function(el, val) {
	    if (val) return el.setAttribute('height', val);
	    return parseInt(el.getAttribute('height'), 10);
	};
	
	
	var setTransformProp = function(el, prop, values) {
	    var old = el.getAttribute('transform');
	    var attr;
	
	    if (!old) {
	        attr = toTransformProp(prop, values);
	    } else if (!old.match(prop)) {
	        attr = old + ' ' + toTransformProp(prop, values);
	    } else {
	        attr = old.replace(new RegExp(prop + '\\((.+?)\\)'), toTransformProp(prop, values));
	    }
	
	    return el.setAttribute('transform', attr);
	};
	
	
	var getTransformProp = function(el, prop) {
	    var attr = el.getAttribute('transform');
	    if (!attr) return;
	
	    var raw = attr.match(prop + '\\((.+?)\\)');
	    if (!raw) return;
	
	    return raw[1].trim().split(' ').map(function(val) {
	
	        return parseInt(val, 10);
	
	    });
	};
	
	
	var toTransformProp = function(prop, values) {
	    return prop + '(' + values.join(' ') + ')';
	};
	
	
	utils.animation = function() {
	
	    var ani;
	
	    return function(fn) {
	        if (ani) window.cancelAnimationFrame(ani);
	        ani = window.requestAnimationFrame(fn);
	    };
	
	};
	
	
	utils.defaults = function(options, defaults) {
	    if (!options) options = {};
	
	    if (defaults) Object.keys(defaults).forEach(function(key) {
	        if (typeof options[key] === 'undefined') options[key] = defaults[key];
	    });
	
	    return options;
	};
	
	
	utils.isMobile = function() {
	    return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase());
	};
	
	utils.pageX = function(e) {
	    return utils.isMobile() ? e.touches[0].pageX : e.pageX;
	};
	
	utils.pageY = function(e) {
	    return utils.isMobile() ? e.touches[0].pageY : e.pageY;
	};
	
	
	utils.onMove = function() {
	    return utils.isMobile() ? 'touchmove' : 'mousemove';
	};
	
	utils.onDown = function() {
	    return utils.isMobile() ? 'touchstart' : 'mousedown';
	};
	
	utils.onUp = function() {
	    return utils.isMobile() ? 'touchend' : 'mouseup';
	};
	
	
	utils.dragDrop = function(options) {
	
	    var config = utils.defaults(options, {
	
	        element: document,
	        start: function() {},
	        stop: function() {},
	        move: function() {},
	
	        enable: function() {
	            config.element.addEventListener(utils.onDown(), start);
	        },
	
	        disable: function() {
	            config.element.removeEventListener(utils.onDown(), start);
	        }
	
	    });
	
	
	    var start = function(e) {
	        var data = {};
	
	        if (config.start(e, data) === false) return;
	
	        var move = function(e) {
	            config.move(e, data);
	        };
	
	        var stop = function(e) {
	            config.stop(e, data);
	            document.removeEventListener(utils.onMove(), move);
	            document.removeEventListener(utils.onUp(), stop);
	        };
	
	        document.addEventListener(utils.onMove(), move);
	        document.addEventListener(utils.onUp(), stop);
	    };
	
	
	    config.enable();
	
	    return config;
	};
	
	
	module.exports = utils;


/***/ },
/* 16 */
/*!************************************!*\
  !*** ./plugins/utils/readImage.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Promise = __webpack_require__(/*! promiscuous */ 18);
	var uriToPng = __webpack_require__(/*! ../../core/uriToPng */ 21);
	
	
	module.exports = function(file) {
	
	    if (!file.type.match(/image\/*/)) {
	        return Promise.reject();
	    }
	
	    return new Promise(function(resolve) {
	
	        var reader = new FileReader();
	
	        reader.onloadend = function() {
	            var blob = new Blob([this.result], {
	                type: file.type
	            });
	            var url = (window.URL || window.webkitURL || window).createObjectURL(blob);
	            resolve(uriToPng(url));
	        };
	
	        reader.readAsArrayBuffer(file);
	
	    });
	
	};


/***/ },
/* 17 */
/*!**************************************!*\
  !*** ./plugins/utils/colorPicker.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(app, options, update, done) {
	
	    var colorPicker = document.querySelector(options.element);
	    var canvas = document.createElement('canvas');
	    var ctx = canvas.getContext('2d');
	
	    colorPicker.appendChild(canvas);
	
	
	    var loadImage = function() {
	        var image = new Image();
	        image.onload = function() {
	            canvas.width = image.width;
	            canvas.height = image.height;
	            ctx.drawImage(image, 0, 0, image.width, image.height);
	        };
	        image.src = options.image;
	    };
	
	
	    var updateBackgroundColor = function(e) {
	        e.preventDefault(); // for touch events
	
	        var pos = eventPosition(e);
	        update(colorAtPos(pos));
	    };
	
	
	    var eventPosition = function(e) {
	        var rect = e.target.getBoundingClientRect();
	
	        return {
	            left: app.utils.pageX(e) - rect.left - document.body.scrollLeft,
	            top: app.utils.pageY(e) - rect.top - document.body.scrollTop
	        };
	    };
	
	
	    var colorAtPos = function(pos) {
	        var data = ctx.getImageData(pos.left, pos.top, 1, 1).data;
	        return 'rgb(' + data[0] + ',' + data[1] + ',' + data[2] + ')';
	    };
	
	
	    app.utils.dragDrop({
	        element: colorPicker,
	        start: updateBackgroundColor,
	        move: updateBackgroundColor,
	        stop: done
	    });
	
	
	    app.on('ready', loadImage);
	
	};


/***/ },
/* 18 */
/*!**************************************!*\
  !*** ./~/promiscuous/promiscuous.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/**@license MIT-promiscuous-©Ruben Verborgh*/
	(function (func, obj) {
	  // Type checking utility function
	  function is(type, item) { return (typeof item)[0] == type; }
	
	  // Creates a promise, calling callback(resolve, reject), ignoring other parameters.
	  function Promise(callback, handler) {
	    // The `handler` variable points to the function that will
	    // 1) handle a .then(resolved, rejected) call
	    // 2) handle a resolve or reject call (if the first argument === `is`)
	    // Before 2), `handler` holds a queue of callbacks.
	    // After 2), `handler` is a finalized .then handler.
	    handler = function pendingHandler(resolved, rejected, value, queue, then, i) {
	      queue = pendingHandler.q;
	
	      // Case 1) handle a .then(resolved, rejected) call
	      if (resolved != is) {
	        return Promise(function (resolve, reject) {
	          queue.push({ p: this, r: resolve, j: reject, 1: resolved, 0: rejected });
	        });
	      }
	
	      // Case 2) handle a resolve or reject call
	      // (`resolved` === `is` acts as a sentinel)
	      // The actual function signature is
	      // .re[ject|solve](<is>, success, value)
	
	      // Check if the value is a promise and try to obtain its `then` method
	      if (value && (is(func, value) | is(obj, value))) {
	        try { then = value.then; }
	        catch (reason) { rejected = 0; value = reason; }
	      }
	      // If the value is a promise, take over its state
	      if (is(func, then)) {
	        function valueHandler(resolved) {
	          return function (value) { then && (then = 0, pendingHandler(is, resolved, value)); };
	        }
	        try { then.call(value, valueHandler(1), rejected = valueHandler(0)); }
	        catch (reason) { rejected(reason); }
	      }
	      // The value is not a promise; handle resolve/reject
	      else {
	        // Replace this handler with a finalized resolved/rejected handler
	        handler = function (Resolved, Rejected) {
	          // If the Resolved or Rejected parameter is not a function,
	          // return the original promise (now stored in the `callback` variable)
	          if (!is(func, (Resolved = rejected ? Resolved : Rejected)))
	            return callback;
	          // Otherwise, return a finalized promise, transforming the value with the function
	          return Promise(function (resolve, reject) { finalize(this, resolve, reject, value, Resolved); });
	        };
	        // Resolve/reject pending callbacks
	        i = 0;
	        while (i < queue.length) {
	          then = queue[i++];
	          // If no callback, just resolve/reject the promise
	          if (!is(func, resolved = then[rejected]))
	            (rejected ? then.r : then.j)(value);
	          // Otherwise, resolve/reject the promise with the result of the callback
	          else
	            finalize(then.p, then.r, then.j, value, resolved);
	        }
	      }
	    };
	    // The queue of pending callbacks; garbage-collected when handler is resolved/rejected
	    handler.q = [];
	
	    // Create and return the promise (reusing the callback variable)
	    callback.call(callback = { then:  function (resolved, rejected) { return handler(resolved, rejected); },
	                               catch: function (rejected)           { return handler(0,        rejected); } },
	                  function (value)  { handler(is, 1,  value); },
	                  function (reason) { handler(is, 0, reason); });
	    return callback;
	  }
	
	  // Finalizes the promise by resolving/rejecting it with the transformed value
	  function finalize(promise, resolve, reject, value, transform) {
	    setImmediate(function () {
	      try {
	        // Transform the value through and check whether it's a promise
	        value = transform(value);
	        transform = value && (is(obj, value) | is(func, value)) && value.then;
	        // Return the result if it's not a promise
	        if (!is(func, transform))
	          resolve(value);
	        // If it's a promise, make sure it's not circular
	        else if (value == promise)
	          reject(TypeError());
	        // Take over the promise's state
	        else
	          transform.call(value, resolve, reject);
	      }
	      catch (error) { reject(error); }
	    });
	  }
	
	  // Export the main module
	  module.exports = Promise;
	
	  // Creates a resolved promise
	  Promise.resolve = ResolvedPromise;
	  function ResolvedPromise(value) { return Promise(function (resolve) { resolve(value); }); }
	
	  // Creates a rejected promise
	  Promise.reject = function (reason) { return Promise(function (resolve, reject) { reject(reason); }); };
	
	  // Transforms an array of promises into a promise for an array
	  Promise.all = function (promises) {
	    return Promise(function (resolve, reject, count, values) {
	      // Array of collected values
	      values = [];
	      // Resolve immediately if there are no promises
	      count = promises.length || resolve(values);
	      // Transform all elements (`map` is shorter than `forEach`)
	      promises.map(function (promise, index) {
	        ResolvedPromise(promise).then(
	          // Store the value and resolve if it was the last
	          function (value) {
	            values[index] = value;
	            --count || resolve(values);
	          },
	          // Reject if one element fails
	          reject);
	      });
	    });
	  };
	})('f', 'o');


/***/ },
/* 19 */,
/* 20 */
/*!***********************************************!*\
  !*** ./plugins/utils/matchesSelector.poly.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	window.Element && function(ElementPrototype) {
	    ElementPrototype.matchesSelector = ElementPrototype.matchesSelector ||
	    ElementPrototype.mozMatchesSelector ||
	    ElementPrototype.msMatchesSelector ||
	    ElementPrototype.oMatchesSelector ||
	    ElementPrototype.webkitMatchesSelector ||
	    function (selector) {
	        var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;
	
	        while (nodes[++i] && nodes[i] != node);
	
	        return !!nodes[i];
	    }
	}(Element.prototype);


/***/ },
/* 21 */
/*!**************************!*\
  !*** ./core/uriToPng.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	var Promise = __webpack_require__(/*! promiscuous */ 18);
	
	var canvas = document.createElement('canvas');
	var context = canvas.getContext('2d');
	
	
	module.exports = function(url) {
	
	    return new Promise(function(resolve) {
	
	        var image = new Image();
	
	        image.onload = function() {
	            canvas.width = image.width;
	            canvas.height = image.height;
	            context.drawImage(image, 0, 0);
	            resolve({
	                url: canvas.toDataURL('image/png'),
	                width: image.width,
	                height: image.height
	            });
	        };
	
	        image.src = url;
	
	    });
	};


/***/ },
/* 22 */
/*!****************************!*\
  !*** ./plugins/preview.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	var defaults = {
	    readyClass: 'preview-ready'
	};
	
	
	var preview = function(app, options) {
	
	    var tempPng, previewWindow;
	
	    var button = document.querySelector(options.element);
	
	    var windowOptions = [
	        'menubar=0',
	        'toolbar=0',
	        'scrollbars=0',
	        'location=0',
	        'personalbar=0',
	        'status=0',
	        'resizable',
	        'chrome',
	        'centerscreen',
	        'dependent',
	        'dialog'
	    ];
	
	
	    var openWindow = function() {
	        if (previewWindow) previewWindow.close();
	
	        previewWindow = window.open(
	            tempPng.url,
	            'preview',
	            windowOptions.join(',') + ',width=' + tempPng.width + ',height=' + tempPng.height
	        );
	
	        tempPng = undefined;
	    };
	
	
	    button.addEventListener('click', function() {
	        if (tempPng) {
	            openWindow();
	            document.body.classList.remove(options.readyClass);
	            app.emit('preview:open');
	            return;
	        }
	
	        app.createPng().then(function(png) {
	            tempPng = png;
	            document.body.classList.add(options.readyClass);
	            app.emit('preview:ready');
	        });
	    });
	
	};
	
	preview.defaults = defaults;
	
	
	
	module.exports = preview;


/***/ },
/* 23 */,
/* 24 */
/*!***************************!*\
  !*** ./core/uriToBlob.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	// http://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata
	var uriToBlob = function(dataURI) {
	    // convert base64/URLEncoded data component to raw binary data held in a string
	    var byteString;
	    if (dataURI.split(',')[0].indexOf('base64') >= 0)
	        byteString = atob(dataURI.split(',')[1]);
	    else
	        byteString = unescape(dataURI.split(',')[1]);
	
	    // separate out the mime component
	    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
	
	    // write the bytes of the string to a typed array
	    var ia = new Uint8Array(byteString.length);
	    for (var i = 0; i < byteString.length; i++) {
	        ia[i] = byteString.charCodeAt(i);
	    }
	
	    return new Blob([ia], {type:mimeString});
	};
	
	
	module.exports = uriToBlob;


/***/ }
/******/ ])
//# sourceMappingURL=graphicDesigner.min.js.map